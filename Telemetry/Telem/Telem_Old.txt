/*
    MPU6050 Triple Axis Gyroscope & Accelerometer. Pitch & Roll & Yaw Gyroscope Example.
    Read more: http://www.jarzebski.pl/arduino/czujniki-i-sensory/3-osiowy-zyroskop-i-akcelerometr-mpu6050.html
    GIT: https://github.com/jarzebski/Arduino-MPU6050
    Web: http://www.jarzebski.pl
    (c) 2014 by Korneliusz Jarzebski
*/

#include <Wire.h>
#include <MPU6050.h>

MPU6050 mpu;

// Timers
unsigned long timer = 0;
float timeStep = 0.01;

// Attitude calculation variables
// Returned Pitch, Roll and Yaw values
float pitch = 0;
float roll = 0;
float yaw = 0;
float q, p, r;
float alpha = 0.02; // Complimentary filter value
// Gyroscope and accelerometer intermediate values
float pitchG, pitchA;
float rollG, rollA;

void setup() 
{
  Serial.begin(115200);
  Wire.begin();
  setupAlt();
  //setupGyro();  
}

void loop()
{
  timer = millis();

  calculerAlt();
  //calculerGyro();

  // Wait to full timeStep period
  delay((timeStep*1000) - (millis() - timer));
}

void setupAlt() {
  
}

void calculerAlt() {
  
}


void setupGyro() {
  // Initialize MPU6050
  while(!mpu.begin(MPU6050_SCALE_2000DPS, MPU6050_RANGE_2G))
  {
    Serial.println("Could not find a valid MPU6050 sensor, check wiring!");
    delay(500);
  }
  
  // Calibrate gyroscope. The calibration must be at rest.
  // If you don't want calibrate, comment this line.
  mpu.calibrateGyro();

  // Set threshold sensivty. Default 3.
  // If you don't want use threshold, comment this line or set 0.
  mpu.setThreshold(3);  
}

void calculerGyro() {

  // Read normalized values
  Vector normG = mpu.readNormalizeGyro();
  Vector normAccel = mpu.readNormalizeAccel();

  // Calculate Pitch, Roll and Yaw (Gyro)
  q = normG.YAxis;
  p = normG.XAxis;
  r = normG.ZAxis;

  pitchG = pitch + timeStep * q;
  rollG = roll + timeStep * p;
  yaw = yaw + r * timeStep;

  // Calculate Pitch & Roll
  pitchA = -(atan2(normAccel.XAxis, sqrt(normAccel.YAxis*normAccel.YAxis + normAccel.ZAxis*normAccel.ZAxis))*180.0)/M_PI;
  rollA = (atan2(normAccel.YAxis, normAccel.ZAxis)*180.0)/M_PI;

  pitch = (1-alpha)*pitchG+alpha*pitchA;
  roll = (1-alpha)*rollG+alpha*rollA;
  
  Serial.print(" Pitch ");
  Serial.print(pitch);
  Serial.print(" Roll ");
  Serial.print(roll);  
  Serial.print(" Yaw ");
  Serial.println(yaw);
  
  Serial.println();

}
